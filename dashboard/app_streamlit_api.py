# === DASHBOARD STREAMLIT CONNECT√â √Ä API (UX FINAL + STYLE CENTERED) ===
# Objectif : dashboard UX √©l√©gant, filtrable, centr√© et harmonis√©

import streamlit as st
import pandas as pd
import requests
from PIL import Image
import json

# === Configuration de l'API ===
API_URL = "https://exmens-final.onrender.com"
API_KEY = "123secure-key"

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {API_KEY}"
}

# === Page config ===
st.set_page_config(page_title="Scoring Cr√©dit IA", layout="wide")

with st.container():
    st.markdown("<h1 style='text-align: center;'>üè¶ Scoring Cr√©dit IA ‚Äî Interface Conseiller</h1>", unsafe_allow_html=True)
    st.markdown("""
    <div style='text-align: center;'>
    Ce tableau de bord permet aux conseillers de :<br>
    ‚úÖ √âvaluer le risque d‚Äôun client √† l‚Äôaide d‚Äôun mod√®le IA<br>
    ‚úÖ Comprendre l‚Äôorigine du score via des explications simples<br>
    ‚úÖ Visualiser ses donn√©es principales et filtrer les clients
    </div>
    """, unsafe_allow_html=True)

# === Blocs p√©dagogiques et fichiers exemples ===
st.info("‚ÑπÔ∏è Pour des r√©sultats fiables, utilisez un fichier complet avec toutes les colonnes d'entra√Ænement. Un fichier simplifi√© donne un score moins pr√©cis.")

# Colonne des boutons
col_btn1, col_btn2, col_btn3, col_btn4 = st.columns(4)

# üìå Bouton avec lien Google Drive au lieu d'open()
with col_btn1:
    st.markdown(
        '[‚¨áÔ∏è Faible risque (complet)](https://drive.google.com/uc?export=download&id=1UIRNE8n7UmHHgRA2sHsg0PRIaYtzxPDb)',
        unsafe_allow_html=True
    )

with col_btn2:
    st.markdown(
        '[‚¨áÔ∏è Risque √©lev√© (complet)](https://drive.google.com/uc?export=download&id=1odOsjM3UgdVUipk29f1c0wPfhL18lmd4)',
        unsafe_allow_html=True
    )

with col_btn3:
    st.markdown(
        '[‚¨áÔ∏è Client simplifi√©](https://drive.google.com/uc?export=download&id=1AqxGqicVBhfik6VPEwqlw-NQj2mg8VLe)',
        unsafe_allow_html=True
    )

with col_btn4:
    st.markdown(
        '[‚¨áÔ∏è Multi-clients](https://drive.google.com/uc?export=download&id=1GsCsM9WIFfDWqRch_3yq8pjtaj335v-P)',
        unsafe_allow_html=True
    )

# === Upload d'un fichier CSV ===
with st.expander("üìÅ Uploader un fichier CSV client (1 ou plusieurs lignes)"):
    st.markdown("Le fichier doit √™tre pr√©-format√© comme ceux ci-dessus, avec des colonnes encod√©es.")
    uploaded_file = st.file_uploader("Uploader le fichier ici", type=["csv"])

if uploaded_file:
    df_all = pd.read_csv(uploaded_file)

    if df_all.empty:
        st.error("Le fichier est vide.")
    else:
        st.success(f"‚úÖ {len(df_all)} client(s) charg√©(s)")

        selected_index = st.selectbox("üë§ S√©lectionnez un client √† analyser :", df_all.index, format_func=lambda i: f"Client #{i+1}")
        input_df = df_all.loc[[selected_index]]
        client_dict = input_df.to_dict(orient="records")[0]

        with st.container():
            st.markdown("<h3 style='text-align: center;'>üë§ Informations du client s√©lectionn√©</h3>", unsafe_allow_html=True)
            st.dataframe(input_df.T, use_container_width=True)

        with st.spinner("üîç Analyse du risque en cours..."):
            predict_response = requests.post(f"{API_URL}/predict", headers=HEADERS, data=json.dumps({"features": client_dict}))

        if predict_response.status_code == 200:
            result = predict_response.json()
            score = result['score']
            decision = result['decision']

            st.markdown("<h3 style='text-align: center;'>üéØ R√©sultat du Score IA</h3>", unsafe_allow_html=True)
            st.metric(label="üßÆ Probabilit√© de d√©faut", value=f"{score:.2%}", help="Plus le score est proche de 1, plus le risque est √©lev√©.")

            if score < 0.4:
                st.success("üü¢ Client √©ligible au cr√©dit")
            elif score < 0.7:
                st.warning("üü† Client √† risque mod√©r√©")
            else:
                st.error("üî¥ Client potentiellement √† risque √©lev√©")

            with st.spinner("üìä Analyse locale SHAP en cours..."):
                explain_response = requests.post(f"{API_URL}/explain", headers=HEADERS, data=json.dumps({"features": client_dict}))

            if explain_response.status_code == 200:
                contribs = explain_response.json()['top_contributions']
                shap_df = pd.DataFrame(contribs)
                st.markdown("<h4 style='text-align: center;'>üîç Variables les plus influentes</h4>", unsafe_allow_html=True)
                st.dataframe(shap_df, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è L'explication SHAP n'a pas pu √™tre g√©n√©r√©e pour ce client.")
        else:
            st.error(f"Erreur API /predict : {predict_response.status_code}")

# === Visuels SHAP globaux (explicatifs) ===
with st.expander("üìä Analyse Globale du Mod√®le (SHAP) - Cliquez pour voir"):
    st.subheader("üìä Analyse Globale du Mod√®le (SHAP)")
    st.markdown("Ces graphiques permettent de comprendre quelles variables influencent le plus souvent les d√©cisions du mod√®le, tous clients confondus.")
    st.markdown("üí° **Astuce :** ces analyses SHAP sont g√©n√©r√©es sur l'ensemble du jeu de donn√©es.")
    col1, col2 = st.columns(2)
    with col1:
        st.image("https://i.postimg.cc/wR6r4Pys/shap-Figure-1.png", caption="Distribution des effets SHAP", use_column_width=True)
    with col2:
        st.image("https://i.postimg.cc/nMZNLsRc/shap-Figure-2.png", caption="Importance moyenne des variables", use_column_width=True)

st.markdown("---")
st.caption("Projet ISCODE | Bloc 4 IA ‚Äî API, Dashboard, UX, S√©curit√© et Interpr√©tabilit√©")
